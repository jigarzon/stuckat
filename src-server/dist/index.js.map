{"version":3,"sources":["../src/index.js"],"names":["extension","require","path","port","app","httpServer","http","createServer","use","exposedHeaders","isMultipartRequest","req","contentTypeHeader","headers","indexOf","bodyParserJsonMiddleware","res","next","bodyParser","json","limit","staticFileMiddleware","express","static","join","__dirname","extendApp","sendFile","listen","err","console","error","address","debug","on","detail","process","exit"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AACA,IAAIA,YAAYC,sBAAhB;;AAEA,IAAIC,OAAOD,QAAQ,MAAR,CAAX;;AAEA,IAAIE,OAAO,IAAX;;AAEA,IAAMC,MAAM,wBAAZ;AACA,IAAIC,aAAaC,eAAKC,YAAL,CAAkBH,GAAlB,CAAjB;AACAA,IAAII,GAAJ,CAAQ,oBAAK;AACXC,kBAAgB,CAAC,MAAD;AADL,CAAL,CAAR;;AAIA;AACA,IAAMC,qBAAqB,SAArBA,kBAAqB,CAAUC,GAAV,EAAe;AACxC,MAAMC,oBAAoBD,IAAIE,OAAJ,CAAY,cAAZ,CAA1B;AACA,SAAOD,qBAAqBA,kBAAkBE,OAAlB,CAA0B,WAA1B,IAAyC,CAAC,CAAtE;AACD,CAHD;;AAKA,IAAMC,2BAA2B,SAA3BA,wBAA2B,GAAY;AAC3C,SAAO,UAAUJ,GAAV,EAAeK,GAAf,EAAoBC,IAApB,EAA0B;AAC/B,QAAIP,mBAAmBC,GAAnB,CAAJ,EAA6B;AAC3B,aAAOM,MAAP;AACD;AACD,WAAOC,qBAAWC,IAAX,CAAgB;AACrBC,aAAO;AADc,KAAhB,EAEJT,GAFI,EAECK,GAFD,EAEMC,IAFN,CAAP;AAGD,GAPD;AAQD,CATD;;AAWAb,IAAII,GAAJ,CAAQO,0BAAR;;AAEA,IAAMM,uBAAuBC,kBAAQC,MAAR,CAAerB,KAAKsB,IAAL,CAAUC,SAAV,EAAqB,QAArB,CAAf,CAA7B;AACAzB,UAAU0B,SAAV,CAAoB,EAAEtB,QAAF,EAApB;AACA;AACAA,IAAII,GAAJ,CAAQa,oBAAR;AACA;AACA;AACAjB,IAAII,GAAJ,CAAQ,GAAR,EAAa,UAAUG,GAAV,EAAeK,GAAf,EAAoB;AAC/BA,MAAIW,QAAJ,CAAazB,KAAKsB,IAAL,CAAUC,SAAV,EAAqB,mBAArB,CAAb;AACD,CAFD;;AAIApB,WACGuB,MADH,CACUzB,IADV,EACgB,eAAO;AACnB,MAAI0B,GAAJ,EAAS;AACPC,YAAQC,KAAR,qCAAgD1B,WAAW2B,OAAX,GAAqB7B,IAArE,EAA6E0B,GAA7E;AACD;AACDC,UAAQG,KAAR,2BAAsC5B,WAAW2B,OAAX,GAAqB7B,IAA3D;AACD,CANH,EAOG+B,EAPH,CAOM,OAPN,EAOe,eAAO;AAClBJ,UAAQC,KAAR,CAAc,uBAAd,EAAuC,EAAEI,QAAQN,GAAV,EAAvC;AACAO,UAAQC,IAAR,CAAa,CAAb;AACD,CAVH;kBAWejC,G","file":"index.js","sourcesContent":["import http from 'http'\nimport express from 'express'\nimport cors from 'cors';\n\nimport bodyParser from 'body-parser'\nvar extension = require('./extension')\n\nvar path = require('path')\n\nvar port = 8989\n\nconst app = express()\nvar httpServer = http.createServer(app)\napp.use(cors({\n  exposedHeaders: ['Link']\n}));\n\n// 3rd party middleware\nconst isMultipartRequest = function (req) {\n  const contentTypeHeader = req.headers['content-type']\n  return contentTypeHeader && contentTypeHeader.indexOf('multipart') > -1\n}\n\nconst bodyParserJsonMiddleware = function () {\n  return function (req, res, next) {\n    if (isMultipartRequest(req)) {\n      return next()\n    }\n    return bodyParser.json({\n      limit: '50mb'\n    })(req, res, next)\n  }\n}\n\napp.use(bodyParserJsonMiddleware())\n\nconst staticFileMiddleware = express.static(path.join(__dirname, 'public'))\nextension.extendApp({ app })\n// static middleware\napp.use(staticFileMiddleware)\n// allow vue.js routing (everything not covered in previous middlewares\n// will be handled by index.html)\napp.use('*', function (req, res) {\n  res.sendFile(path.join(__dirname, 'public/index.html'))\n})\n\nhttpServer\n  .listen(port, err => {\n    if (err) {\n      console.error(`Error starting server  on port ${httpServer.address().port}`, err)\n    }\n    console.debug(`Started http on port ${httpServer.address().port}`)\n  })\n  .on('error', err => {\n    console.error('Error Starting Server', { detail: err })\n    process.exit(1)\n  })\nexport default app\n"]}